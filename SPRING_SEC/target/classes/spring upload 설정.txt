	<!-- fileupload -->
		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
			<version>1.2.2</version>
		</dependency>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.4</version>
		</dependency>





	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10000000" />
	</bean>




<!-- <form action="/binsert.do" method="post"> -->
<form action="/binsert.do" method="post" enctype="multipart/form-data">
첨부파일 : <input type="file" name="ufile"> <br>




//http://winmargo.tistory.com/102


	//----------------------------------
//	빈객체를 이용해서 받는 방법(vo)
	private MultipartFile ufile;
	


//	@RequestParam 어노테이션을 이용하는 방법,
@RequestMapping(method = RequestMethod.POST)
public ModelAndView upload(@RequestParam("ufile") MultipartFile ufile) {


//	MultipartHttpServletRequest 를 이용하는 방법,
생략 ~~


byte fileData[] = ufile.getBytes();
fos = new FileOutputStream(path + "\\" + fileName);
fos.write(fileData);

또는

File file = new File(filePath + fileName);
multipartFile.transferTo(file); 




String getName() 파라미터 이름을 구한다.   
String getOriginalFilename()  업로드 한 파일의 실제!! 이름을 구한다.  
boolean isEmpty()  업로드 한 파일이 존재하지 않는 경우 true를 리턴한다.  
long getSize()  업로드한 파일의 크기를 구한다.  
byte[] getBytes() throws IOException  업로드 한 파일 데이터를 구한다. --> 이걸로 파일 쓰면된다.  
InputStream getInputStream()  InputStrem을 구한다.  
void transferTo(File dest)  업로드 한 파일 데이터를 지정한 파일에 저장한다. --> 요고도 파일쓰는거다.



